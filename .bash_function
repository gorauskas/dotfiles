# Bourne Again Shell Init Function File
# Jonas Gorauskas - 2007.03.17 22:00:00
# Modified: 2017-10-08 13:12:10

# Find a process by name
function psgrep() {
    ps aux | grep -v grep | grep -i -e VSZ -e $1
}

# Kill a process by Name
function pskill() {
    local pid
    pid=$(ps ax | grep -i -e $1 | grep -v grep | awk '{ print $1 }')
    echo -n "Killing $1 (Process $pid) ..."
    kill -9 $pid
    echo "Slaughtered ..."
}

# Watch output written to file
function fwatch() {
    if [ $# -ne 1 ]; then
        tail -f nohup.out
    else
        tail -f $1
    fi
}

function rot13() {
    if [ $# = 0 ] ; then
        tr "[a-m][n-z][A-M][N-Z]" "[n-z][a-m][N-Z][A-M]"
    else
        echo $1 | tr "[a-m][n-z][A-M][N-Z]" "[n-z][a-m][N-Z][A-M]"
    fi
}

function chmog() {
    if [ $# -ne 4 ]; then
        echo "usage: chmog mode owner group file"
        return 1
    else
        chmod $1 $4
        chown $2 $4
        chgrp $3 $4
    fi
}

# requires superuser access in order to look at
# all nooks and crannies
function findall() {
    sudo find / -name ${1} -print ;
}

# Display Environment Information
function envinfo() {
    local i
    local is
    let ic=0

    for i in "${BASH_VERSINFO[@]}";
    do
        if [ $ic = 5 ]; then
            is="$is on a $i"
        else
            if [ $ic = 0 ]; then
                is="Bash Version $i"
            elif [ $ic = 1 ]; then
                is="$is.$i"
            elif [ $ic = 2 ]; then
                is="$is.$i("
            elif [ $ic = 3 ]; then
                is="$is$i)/"
            elif [ $ic = 4 ]; then
                is="$is$i"
            fi
        fi
        let ic=$ic+1
    done
    echo $is
}

# clean a directory by removing all temp and backup files
# that were left behind
function clean () {
    echo -n "Are you sure you want to clean this directory? [y/n] "
    read yorn
    if test "$yorn" = "y"; then
        rm -f \#* *~ .*~ *.bak .*.bak *.tmp .*.tmp core a.out
        echo "Directory has been cleaned!"
    else
        echo "Clean operation has been aborted..."
    fi
}

# Start a simple python httpd on the current directory at the given port
function websrv () {
    command -v python >/dev/null 2>&1 || { echo >&2 "I require python but it's not installed.  Aborting."; exit 1; }
    if [ "$(python -c 'import sys; print(sys.version_info[0])')" -eq 2 ]; then
        python -m SimpleHTTPServer "$@"
    else
        python -m http.server "$@"
    fi
}

# make and cd into directory
function mcd () {
    mkdir -p "$1" && cd "$1";
}

# extract archives based on extension
function extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)   tar -jxvf $1          ;;
            *.tar.gz)    tar -zxvf $1          ;;
            *.tbz2)      tar -jxvf $1          ;;
            *.tgz)       tar -zxvf $1          ;;
            *.tar)       tar -xvf $1           ;;
            *.bz2)       bunzip2 $1            ;;
            *.zip)       unzip $1              ;;
            *.ZIP)       unzip $1              ;;
            *.gz)        gunzip $1             ;;
            *.Z)         uncompress $1         ;;

            *.7z)        7z -x $1              ;;
            *.rar)       unrar -x $1           ;;
            *.jar)       jar -xvf $1           ;;

            *.pax)       cat $1 | pax -r                  ;;
            *.pax.Z)     uncompress $1 --stdout | pax -r  ;;

            *) echo "'$1' cannot be uncompressed with extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# get your current internet ip
# function myip () {
#     echo `curl -s http://freegeoip.net/xml/`
# }

# Git commit and push - CAP
function cap () {
    git add . ;
    git commit -m "$1" ;
    git pull ;
    git push ;
}

# Git compare local to remote - GDR git diff remote
function gdr () {
    git fetch origin ;
    git diff $1..origin/$1;
}

# use wget to get a full page impression time
#   robot exclusions will not be loaded
function full_page_impression_load_time() {
    time wget -p --delete-after $1 -o /dev/null
}

# musical ping - requires the sox package be isntalled
function mping() {
    ping $@ | awk -F[=\ ] '/time=/{t=$(NF-1);f=2000-14*log(t^18);c="play -q -n synth 1 pl "f"&";print $0;system(c)}';
}

# aws s3 sync
function s3up() {
    echo "Sync up to $1";
    aws s3 sync . s3://$1/ ;
}

function s3down() {
    echo "Sync down from $1";
    aws s3 sync s3://$1/ . ;
}

# docker
function docker-names {
    for ID in `docker ps | awk '{print $1}' | grep -v 'CONTAINER'`; do
        docker inspect $ID | grep Name | head -1 | awk '{print $2}' | sed 's/,//g' | sed 's%/%%g' | sed 's/"//g'
    done
}

function docker-ips {
    echo "IP addresses of all named running containers"

    for DOC in `docker-names`; do
        IP=`docker inspect $DOC | grep -m3 IPAddress | cut -d '"' -f 4 | tr -d "\n"`
        OUT+=$DOC'\t'$IP'\n'
    done;

    echo -e $OUT | column -t
}

function docker-exec {
    docker exec -it $1 ${2:-bash}
}

function docker-inspect {
    docker inspect $1
}

function docker-logs {
    docker logs -f $1
}

function docker-run {
    docker run -it $1 $2
}

function docker-compose-run {
    docker-compose run $@
}

function docker-stop-remove {
    docker stop $1; docker rm $1
}

function docker-remove-exited {
    docker rm $(docker ps --all -q -f status=exited)
}

function docker-remove-dangling-images {
    imgs=$(docker images -q -f dangling=true)
    [ ! -z "$imgs" ] && docker rmi "$imgs" || echo "No dangling images!"
}

function docker-compose-fn {
    docker-compose $*
}

# to allow for things like `dex $(dlab label) sh`
function dlab {
    docker ps --filter="label=$1" --format="{{.ID}}"
}

# LINUX ONLY
if [[ "$PLATFORM" == "Linux" ]]; then

    # Open any document with any application
    function open () {
        T=`xdg-mime query filetype $1`
        echo "Opening file" $1 "of type" $T "with" `xdg-mime query default $T`
        xdg-open $1
        echo "Open done!"
    }

    # cd and ls in one
    function cl () {
        if [ -d "$1" ]; then
            cd "$1"
            dir
        else
            echo "bash: cl '%1' - Directory not found"
        fi
    }

    # create 16 char password using /dev/urandom
    function mkpwd () {
        LC_ALL=C tr -dc '[:graph:]' < /dev/urandom | head -c ${1:-16}; echo;
    }
fi
